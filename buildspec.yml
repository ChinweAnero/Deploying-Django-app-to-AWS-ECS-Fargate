version: 0.2

env:
  variables:
    AWS_REGION: eu-west-2
    FRONTEND_REPO_URL: 707798379596.dkr.ecr.eu-west-2.amazonaws.com/frontend-ecr-repo
    CWAGENT_REPO_URL: 707798379596.dkr.ecr.eu-west-2.amazonaws.com/cloudwatch-agent-ecr-repo

phases:
  pre_build:
    commands:
      - echo Fetching credentials from SSM Parameter Store
      - DOCKERHUB_USERNAME=$(aws ssm get-parameter --name "docker_username" --with-decryption --query "Parameter.Value" --output text)
      - DOCKERHUB_TOKEN=$(aws ssm get-parameter --name "docker_user_token" --with-decryption --query "Parameter.Value" --output text)

      - echo Logging into Docker Hub...
      - echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin

      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_REPO_URL
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $CWAGENT_REPO_URL

      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - if [ -z "$IMAGE_TAG" ]; then IMAGE_TAG="latest"; fi
      - export IMAGE_TAG

      - export AWS_SECRET_ACCESS_KEY=$(aws ssm get-parameter --name "/my/aws/secret_key" --with-decryption --query "Parameter.Value" --output text)
      - export AWS_ACCESS_KEY_ID=$(aws ssm get-parameter --name "/my/aws/key_id" --with-decryption --query "Parameter.Value" --output text)
      - export CLOUDWATCH_AGENT_SSM_NAME="/cwagent/config/prometheus"


  build:
    commands:
      - echo Building frontend Docker image...
      - docker build -t $FRONTEND_REPO_URL:$IMAGE_TAG -f Dockerfile .
      - docker tag $FRONTEND_REPO_URL:$IMAGE_TAG $FRONTEND_REPO_URL:latest

      - echo Building cwagent Docker image...
      - docker build -t $CWAGENT_REPO_URL:$IMAGE_TAG -f cloudwatch-agent/Dockerfile ./cloudwatch-agent
      - docker tag $CWAGENT_REPO_URL:$IMAGE_TAG $CWAGENT_REPO_URL:latest

  post_build:
    commands:
      - echo Pushing frontend image...
      - docker push $FRONTEND_REPO_URL:$IMAGE_TAG
      - docker push $FRONTEND_REPO_URL:latest

      - echo Pushing cwagent image...
      - docker push $CWAGENT_REPO_URL:$IMAGE_TAG
      - docker push $CWAGENT_REPO_URL:latest

      - echo Updating task definition with new frontend image URI...
      - export IMAGE_URI=$FRONTEND_REPO_URL:$IMAGE_TAG
      - sed "s|<IMAGE_URI>|$IMAGE_URI|g" taskdef-template.json > taskdef.json

      - echo Registering task definition...
      - TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)

      - echo Generating appspec.json from template...
      - sed "s|\[TASK_DEF_ARN\]|$TASK_DEF_ARN|g" appspec-template.json > appspec.json


      - echo Validating CloudWatch Agent config from SSM...
      - CONFIG_FILE=config.json
      - aws ssm get-parameter --name "$CLOUDWATCH_AGENT_SSM_NAME" --with-decryption --query "Parameter.Value" --output text > $CONFIG_FILE


      - docker run --rm \
        -v $(pwd):/configs \
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
        -e AWS_REGION=$AWS_REGION \
        ${CWAGENT_REPO_URL}:${IMAGE_TAG} \
        /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
        -a validate \
        -c file:/configs/$CONFIG_FILE \
        -m ecs



artifacts:
  files:
    - taskdef.json
    - appspec.json
